// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace test {
class Rep;
class RepDefaultTypeInternal;
extern RepDefaultTypeInternal _Rep_default_instance_;
class Req;
class ReqDefaultTypeInternal;
extern ReqDefaultTypeInternal _Req_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::Rep* Arena::CreateMaybeMessage<::test::Rep>(Arena*);
template<> ::test::Req* Arena::CreateMaybeMessage<::test::Req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

// ===================================================================

class Req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.Req) */ {
 public:
  Req();
  virtual ~Req();

  Req(const Req& from);
  Req(Req&& from) noexcept
    : Req() {
    *this = ::std::move(from);
  }

  inline Req& operator=(const Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Req& operator=(Req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req* internal_default_instance() {
    return reinterpret_cast<const Req*>(
               &_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Req& a, Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Req* New() const final {
    return CreateMaybeMessage<Req>(nullptr);
  }

  Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Req& from);
  void MergeFrom(const Req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.Req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromjsonFieldNumber = 1,
  };
  // string fromjson = 1;
  void clear_fromjson();
  const std::string& fromjson() const;
  void set_fromjson(const std::string& value);
  void set_fromjson(std::string&& value);
  void set_fromjson(const char* value);
  void set_fromjson(const char* value, size_t size);
  std::string* mutable_fromjson();
  std::string* release_fromjson();
  void set_allocated_fromjson(std::string* fromjson);
  private:
  const std::string& _internal_fromjson() const;
  void _internal_set_fromjson(const std::string& value);
  std::string* _internal_mutable_fromjson();
  public:

  // @@protoc_insertion_point(class_scope:test.Req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromjson_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Rep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.Rep) */ {
 public:
  Rep();
  virtual ~Rep();

  Rep(const Rep& from);
  Rep(Rep&& from) noexcept
    : Rep() {
    *this = ::std::move(from);
  }

  inline Rep& operator=(const Rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rep& operator=(Rep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rep* internal_default_instance() {
    return reinterpret_cast<const Rep*>(
               &_Rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rep& a, Rep& b) {
    a.Swap(&b);
  }
  inline void Swap(Rep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rep* New() const final {
    return CreateMaybeMessage<Rep>(nullptr);
  }

  Rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rep& from);
  void MergeFrom(const Rep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.Rep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5StrFieldNumber = 1,
  };
  // string md5str = 1;
  void clear_md5str();
  const std::string& md5str() const;
  void set_md5str(const std::string& value);
  void set_md5str(std::string&& value);
  void set_md5str(const char* value);
  void set_md5str(const char* value, size_t size);
  std::string* mutable_md5str();
  std::string* release_md5str();
  void set_allocated_md5str(std::string* md5str);
  private:
  const std::string& _internal_md5str() const;
  void _internal_set_md5str(const std::string& value);
  std::string* _internal_mutable_md5str();
  public:

  // @@protoc_insertion_point(class_scope:test.Rep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Req

// string fromjson = 1;
inline void Req::clear_fromjson() {
  fromjson_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Req::fromjson() const {
  // @@protoc_insertion_point(field_get:test.Req.fromjson)
  return _internal_fromjson();
}
inline void Req::set_fromjson(const std::string& value) {
  _internal_set_fromjson(value);
  // @@protoc_insertion_point(field_set:test.Req.fromjson)
}
inline std::string* Req::mutable_fromjson() {
  // @@protoc_insertion_point(field_mutable:test.Req.fromjson)
  return _internal_mutable_fromjson();
}
inline const std::string& Req::_internal_fromjson() const {
  return fromjson_.GetNoArena();
}
inline void Req::_internal_set_fromjson(const std::string& value) {
  
  fromjson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Req::set_fromjson(std::string&& value) {
  
  fromjson_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Req.fromjson)
}
inline void Req::set_fromjson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromjson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Req.fromjson)
}
inline void Req::set_fromjson(const char* value, size_t size) {
  
  fromjson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Req.fromjson)
}
inline std::string* Req::_internal_mutable_fromjson() {
  
  return fromjson_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Req::release_fromjson() {
  // @@protoc_insertion_point(field_release:test.Req.fromjson)
  
  return fromjson_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Req::set_allocated_fromjson(std::string* fromjson) {
  if (fromjson != nullptr) {
    
  } else {
    
  }
  fromjson_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromjson);
  // @@protoc_insertion_point(field_set_allocated:test.Req.fromjson)
}

// -------------------------------------------------------------------

// Rep

// string md5str = 1;
inline void Rep::clear_md5str() {
  md5str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Rep::md5str() const {
  // @@protoc_insertion_point(field_get:test.Rep.md5str)
  return _internal_md5str();
}
inline void Rep::set_md5str(const std::string& value) {
  _internal_set_md5str(value);
  // @@protoc_insertion_point(field_set:test.Rep.md5str)
}
inline std::string* Rep::mutable_md5str() {
  // @@protoc_insertion_point(field_mutable:test.Rep.md5str)
  return _internal_mutable_md5str();
}
inline const std::string& Rep::_internal_md5str() const {
  return md5str_.GetNoArena();
}
inline void Rep::_internal_set_md5str(const std::string& value) {
  
  md5str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Rep::set_md5str(std::string&& value) {
  
  md5str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Rep.md5str)
}
inline void Rep::set_md5str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Rep.md5str)
}
inline void Rep::set_md5str(const char* value, size_t size) {
  
  md5str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Rep.md5str)
}
inline std::string* Rep::_internal_mutable_md5str() {
  
  return md5str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rep::release_md5str() {
  // @@protoc_insertion_point(field_release:test.Rep.md5str)
  
  return md5str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rep::set_allocated_md5str(std::string* md5str) {
  if (md5str != nullptr) {
    
  } else {
    
  }
  md5str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5str);
  // @@protoc_insertion_point(field_set_allocated:test.Rep.md5str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
